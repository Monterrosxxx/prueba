import { useState, useCallback, useMemo } from "react";
import { useNavigate } from 'react-router-dom';
import { useAuth } from '../../../context/AuthContext';

/**
 * Hook personalizado para manejar el formulario de inicio de sesi√≥n
 * OPTIMIZADO: Uso de useCallback y useMemo para evitar re-renderizados innecesarios
 * Proporciona funcionalidades completas de autenticaci√≥n:
 * - Manejo de campos del formulario (email, password)
 * - Validaciones en tiempo real del lado cliente
 * - Integraci√≥n con el sistema de autenticaci√≥n
 * - Manejo de errores espec√≠ficos con mensajes amigables
 * - Redirecci√≥n autom√°tica despu√©s del login exitoso
 * 
 * @returns {Object} Objeto con estados y funciones del formulario de login
 */
const useLoginForm = () => {
    // ============ ESTADOS DEL FORMULARIO ============
    
    /**
     * Estado que contiene los datos del formulario de login
     * - email: Direcci√≥n de correo electr√≥nico del usuario
     * - password: Contrase√±a del usuario
     */
    const [formData, setFormData] = useState({
        email: '',
        password: ''
    });

    /**
     * Estado para manejar errores de validaci√≥n y del servidor
     * Cada campo puede tener su propio error, m√°s un error general
     */
    const [errors, setErrors] = useState({});

    /**
     * Estado para mostrar indicador de carga durante el proceso de login
     * Previene m√∫ltiples env√≠os y mejora la experiencia del usuario
     */
    const [isLoading, setIsLoading] = useState(false);

    /**
     * Estado para controlar la visibilidad de la contrase√±a
     * Permite al usuario alternar entre texto plano y oculto
     */
    const [showPassword, setShowPassword] = useState(false);

    // ============ HOOKS DE NAVEGACI√ìN Y AUTENTICACI√ìN ============
    
    const navigate = useNavigate(); // Hook para redireccionar program√°ticamente
    const { login } = useAuth(); // Hook para acceder a la funci√≥n de login del contexto

    // ============ VALIDACIONES MEMOIZADAS ============
    
    /**
     * Reglas de validaci√≥n memoizadas para optimizar rendimiento
     * Se recalculan solo cuando cambian las dependencias
     */
    const validationRules = useMemo(() => ({
        /**
         * Validaci√≥n para el campo de email
         * @param {string} email - Email a validar
         * @returns {Object} Resultado de la validaci√≥n
         */
        email: (email) => {
            if (!email || !email.trim()) {
                return { isValid: false, error: 'El correo electr√≥nico es requerido' };
            }
            
            const emailRegex = /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,}$/i;
            if (!emailRegex.test(email.trim())) {
                return { isValid: false, error: 'El formato del correo electr√≥nico no es v√°lido' };
            }
            
            return { isValid: true, error: null };
        },

        /**
         * Validaci√≥n para el campo de contrase√±a
         * @param {string} password - Contrase√±a a validar
         * @returns {Object} Resultado de la validaci√≥n
         */
        password: (password) => {
            if (!password || !password.trim()) {
                return { isValid: false, error: 'La contrase√±a es requerida' };
            }
            
            if (password.length < 8) {
                return { isValid: false, error: 'La contrase√±a debe tener al menos 8 caracteres' };
            }
            
            return { isValid: true, error: null };
        }
    }), []);

    // ============ FUNCIONES DE VALIDACI√ìN ============
    
    /**
     * Valida un campo espec√≠fico en tiempo real
     * Memoizada para evitar rec√°lculos innecesarios
     */
    const validateField = useCallback((fieldName, value) => {
        const validator = validationRules[fieldName];
        if (!validator) return { isValid: true, error: null };
        
        return validator(value);
    }, [validationRules]);

    /**
     * Valida todos los campos del formulario
     * Implementa validaciones del lado cliente para mejorar UX
     * Memoizada para optimizar rendimiento
     */
    const validateAllFields = useCallback(() => {
        const newErrors = {};
        let isFormValid = true;

        // Validar email
        const emailValidation = validateField('email', formData.email);
        if (!emailValidation.isValid) {
            newErrors.email = emailValidation.error;
            isFormValid = false;
        }

        // Validar contrase√±a
        const passwordValidation = validateField('password', formData.password);
        if (!passwordValidation.isValid) {
            newErrors.password = passwordValidation.error;
            isFormValid = false;
        }

        return { isValid: isFormValid, errors: newErrors };
    }, [formData.email, formData.password, validateField]);

    // ============ MANEJADORES DE EVENTOS ============
    
    /**
     * Maneja los cambios en los campos de entrada del formulario
     * Actualiza el estado del formulario y ejecuta validaci√≥n en tiempo real
     * Memoizada para evitar re-creaciones innecesarias
     * 
     * @param {Event} e - Evento de cambio del input
     */
    const handleInputChange = useCallback((e) => {
        const { name, value } = e.target;
        
        // Actualizar el valor del campo correspondiente
        setFormData(prev => ({
            ...prev,
            [name]: value
        }));

        // Validaci√≥n en tiempo real solo si el campo ya tiene contenido o ya tuvo un error
        if (value.trim() || errors[name]) {
            const validation = validateField(name, value);
            
            setErrors(prev => ({
                ...prev,
                [name]: validation.error,
                // Limpiar error general cuando el usuario empiece a corregir
                general: null
            }));
        }
    }, [errors, validateField]);

    /**
     * Alterna la visibilidad de la contrase√±a
     * Memoizada para evitar re-creaciones
     */
    const togglePasswordVisibility = useCallback(() => {
        setShowPassword(prev => !prev);
    }, []);

    // ============ FUNCI√ìN PRINCIPAL DE ENV√çO ============
    
    /**
     * Maneja el env√≠o del formulario de inicio de sesi√≥n
     * Ejecuta validaciones completas, llama al servicio de autenticaci√≥n y maneja la respuesta
     * Memoizada para optimizar rendimiento
     * 
     * @param {Event} e - Evento de env√≠o del formulario
     */
    const handleSubmit = useCallback(async (e) => {
        e.preventDefault(); // Prevenir recarga de p√°gina

        console.log('üîê Iniciando proceso de login...');

        // ---- Validar formulario completo antes de enviar ----
        const validation = validateAllFields();
        
        if (!validation.isValid) {
            console.log('‚ùå Formulario inv√°lido, mostrando errores:', validation.errors);
            setErrors(validation.errors);
            
            // Enfocar el primer campo con error
            const firstErrorField = Object.keys(validation.errors)[0];
            const element = document.querySelector(`[name="${firstErrorField}"]`);
            if (element) {
                element.focus();
            }
            
            return;
        }

        // ---- Configurar estado de carga ----
        setIsLoading(true);
        setErrors({}); // Limpiar errores previos

        try {
            console.log('üì° Enviando credenciales al servidor...');
            
            // Preparar datos limpios para el env√≠o
            const cleanEmail = formData.email.trim().toLowerCase();
            const cleanPassword = formData.password.trim();
            
            // ---- Llamar al m√©todo de login del contexto de autenticaci√≥n ----
            const result = await login(cleanEmail, cleanPassword);

            console.log('üì• Respuesta recibida del servidor:', result.success ? '√âxito' : 'Error');

            // ---- Procesar resultado del login ----
            if (result.success) {
                // Login exitoso - el AuthContext maneja la redirecci√≥n autom√°ticamente
                console.log('‚úÖ Login exitoso, redirigiendo...');
                
                // Limpiar formulario por seguridad
                setFormData({ email: '', password: '' });
                setErrors({});
                
                // Nota: La redirecci√≥n se maneja en el AuthContext o en el componente padre
                
            } else {
                // Login fallido - mostrar errores espec√≠ficos
                console.log('‚ùå Login fallido:', result.message);
                
                // ---- Mapear errores espec√≠ficos del backend a campos del formulario ----
                const errorMessage = result.message?.toLowerCase() || '';
                
                if (errorMessage.includes('usuario no encontrado') || 
                    errorMessage.includes('user not found')) {
                    // Usuario no existe en el sistema
                    setErrors({ email: 'No se encontr√≥ una cuenta con este correo electr√≥nico' });
                } else if (errorMessage.includes('contrase√±a') || 
                          errorMessage.includes('password') || 
                          errorMessage.includes('invalid')) {
                    // Contrase√±a incorrecta
                    setErrors({ password: 'La contrase√±a ingresada es incorrecta' });
                } else {
                    // Error general o no especificado
                    setErrors({ 
                        general: result.message || 'Error en el inicio de sesi√≥n. Int√©ntalo nuevamente.' 
                    });
                }
            }
        } catch (error) {
            // ---- Manejar errores de red o del sistema ----
            console.error('üí• Error durante el login:', error);
            
            let errorMessage = 'Error de conexi√≥n. Verifica tu internet e int√©ntalo nuevamente.';
            
            // Personalizar mensaje seg√∫n el tipo de error
            if (error.name === 'TypeError') {
                errorMessage = 'Error de conexi√≥n con el servidor. Verifica tu internet.';
            } else if (error.message?.includes('timeout')) {
                errorMessage = 'La conexi√≥n tard√≥ demasiado. Int√©ntalo nuevamente.';
            }
            
            setErrors({ general: errorMessage });
        } finally {
            // ---- Limpiar estado de carga ----
            setIsLoading(false);
        }
    }, [formData, validateAllFields, login]);

    // ============ FUNCIONES DE UTILIDAD ============
    
    /**
     * Limpia todos los errores del formulario
     * √ötil para resetear el estado de errores manualmente
     * Memoizada para optimizar rendimiento
     */
    const clearErrors = useCallback(() => {
        console.log('üßπ Limpiando errores del formulario');
        setErrors({});
    }, []);

    /**
     * Limpia el formulario completo
     * √ötil para resetear el estado despu√©s de logout o cambio de p√°gina
     * Memoizada para optimizar rendimiento
     */
    const clearForm = useCallback(() => {
        console.log('üóëÔ∏è Limpiando formulario completo');
        setFormData({ email: '', password: '' });
        setErrors({});
        setShowPassword(false);
    }, []);

    /**
     * Verifica si el formulario est√° listo para ser enviado
     * Memoizada para evitar rec√°lculos innecesarios
     */
    const isFormValid = useMemo(() => {
        const validation = validateAllFields();
        return validation.isValid;
    }, [validateAllFields]);

    /**
     * Verifica si hay errores visibles en el formulario
     * √ötil para mostrar/ocultar mensajes de error globales
     */
    const hasErrors = useMemo(() => {
        return Object.keys(errors).length > 0;
    }, [errors]);

    // ============ RETORNO DEL HOOK ============
    
    /**
     * Retorna todos los estados y funciones necesarias para el formulario de login
     * Los componentes que usen este hook tendr√°n acceso completo a la funcionalidad
     */
    return {
        // ---- Estados del formulario ----
        formData,              // Datos actuales del formulario (email, password)
        errors,                // Errores de validaci√≥n por campo
        isLoading,             // Estado de carga durante el env√≠o
        showPassword,          // Estado de visibilidad de la contrase√±a
        
        // ---- Estados computados ----
        isFormValid,           // Si el formulario est√° listo para env√≠o
        hasErrors,             // Si hay errores visibles
        
        // ---- Manejadores de eventos ----
        handleInputChange,     // Funci√≥n para manejar cambios en inputs
        handleSubmit,          // Funci√≥n para manejar env√≠o del formulario
        togglePasswordVisibility, // Funci√≥n para mostrar/ocultar contrase√±a
        
        // ---- Funciones de utilidad ----
        clearErrors,           // Funci√≥n para limpiar errores manualmente
        clearForm,             // Funci√≥n para limpiar formulario completo
        setFormData,           // Funci√≥n para actualizar datos del formulario (uso avanzado)
        validateField          // Funci√≥n para validar campos individuales
    };
};

export default useLoginForm;